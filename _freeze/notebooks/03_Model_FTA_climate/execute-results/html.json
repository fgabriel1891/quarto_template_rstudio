{
  "hash": "14daf396e1a630291f8232dd3110cb89",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modelling the effect of climate in FTA\"\nformat: \n  html:\n    theme: \"flatly\" # A clean, flat theme suitable for scientific documents\n    toc: true # Enables table of contents\n    toc-depth: 3 # Adjusts depth of table of contents; change as needed\n    number-sections: true # Enables section numbering\n    fig-width: 6 # Sets default figure width to 6 inches\n    fig-height: 4 # Sets default figure height to 4 inches\n    fig-align: \"center\" # Centers figures\neditor: visual\nexecute:\n  eval: false\n  echo: true\n---\n\n\n\n# Plot the relationship between FR of palms and mammals and climatic variables\n\nPreprare climatic variables\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(sf)\nlibrary(raster)\n\nneotropics <- st_read('00_Data/03_Landscape/Morrone_Neotropics/Lowenberg_Neto_2014.shp')\n\ngrid <- st_make_grid(neotropics, cellsize = c(1, 1), what = \"polygons\", \n                     crs = sf::st_crs(st_read(palm_shp_files[1])))\n# Convert the grid to a simple feature collection\ngrid <- st_sf(grid)\n\n# download climatic data\nWCLim <- raster::getData(\"worldclim\", var=\"bio\",res=10)\n\ncropMask <- function(raster,prov){\n  ## crop and mask\n  r2 <- crop(raster, extent(prov))\n  r3 <- mask(r2, prov)\n  return(r3)\n}\n\n# crop data to the neotropics\nWCLim <- cropMask(WCLim, neotropics)\n\n# Separate variables of interest\n\nTemp <- WCLim[[1]]\nPrec <- WCLim[[12]]\nPrecSe <- WCLim[[15]]\nIsoTer<- WCLim[[3]]\nTempSeaso<- WCLim[[14]]\n\nTemp <- aggregate(Temp, 1/0.17)\nPrec <- aggregate(Prec, 1/0.17)\nPrecSe <- aggregate(PrecSe, 1/0.17)\nTempSeaso <- aggregate(TempSeaso, 1/0.17)\n\n\n# extract climate data at per grid\ngridTemp <- raster::extract(Temp, Assemblages)\ngridPrec <- raster::extract(Prec,Assemblages)\ngridTS <- raster::extract(TempSeaso,Assemblages)\ngridPS <- raster::extract(PrecSe,Assemblages)\n```\n:::\n\n\nJoin climatic variables to biological data\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nadd_clim_data <- function(z_score_table, coordinates_grid){\n  # z_score_table <- fr_palms\n  \n  \n  # z_score_table <- z_scores_across_biogeog\n  grid_coords <- as.data.frame(coordinates_grid[as.numeric(z_score_table$grid),])\n  z_score_table <-  cbind(z_score_table,grid_coords)\n  \n  ## make xy dataframe as simple feature\n  grid_coords <- st_as_sf(grid_coords, coords = c(\"X\", \"Y\"), crs = st_crs(neotropics))\n  \n  \n  ## add id to the models \n  \n  clim_var <- \n    data.frame(\n      'Temp' =  raster::extract(Temp, sf::st_as_sf(grid_coords)),\n      'Prec' =  raster::extract(Prec,sf::st_as_sf(grid_coords)),\n      'TS' =  raster::extract(TempSeaso,sf::st_as_sf(grid_coords)),\n      'PS' =  raster::extract(PrecSe,sf::st_as_sf(grid_coords))\n    )\n  \n  ggsf <- data.frame(z_score_table,clim_var)\n  ggsf <- na.omit(ggsf)\n  \n  ggsf <- ggsf |>\n    reshape2::melt(id.vars = c('grid', 'Temp', 'Prec', 'TS', 'PS'), value.name = c('obs_ab'), variable.name = 'SBM_G') |>\n    reshape2::melt(id.vars = c('grid','SBM_G', 'obs_ab'), value.name = c('clim_val'), variable.name = 'clim_var') |> \n    filter(!SBM_G %in% c('X', 'Y'))\n  \n  return(ggsf)\n  \n}\n\n\nadd_clim_data2 <- function(z_score_table, coordinates_grid){\n  # z_score_table <- fr_palms\n  \n  \n  # z_score_table <- z_scores_across_biogeog\n  grid_coords <- as.data.frame(coordinates_grid[as.numeric(z_score_table$grid),])\n  z_score_table <-  cbind(z_score_table,grid_coords)\n  \n  ## make xy dataframe as simple feature\n  grid_coords <- st_as_sf(grid_coords, coords = c(\"X\", \"Y\"), crs = st_crs(neotropics))\n  \n  \n  ## add id to the models \n  \n  clim_var <- \n    data.frame(\n      'Temp' =  raster::extract(Temp, sf::st_as_sf(grid_coords)),\n      'Prec' =  raster::extract(Prec,sf::st_as_sf(grid_coords)),\n      'TS' =  raster::extract(TempSeaso,sf::st_as_sf(grid_coords)),\n      'PS' =  raster::extract(PrecSe,sf::st_as_sf(grid_coords))\n    )\n  \n  ggsf <- data.frame(z_score_table,clim_var)\n  ggsf <- na.omit(ggsf)\n  \n  \n  return(ggsf)\n  \n}\n```\n:::\n\n\nPlot palms relationship with climate\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfr_palms_with_climate <- add_clim_data(fr_norm_palms, coordinates_grid)\n\nfr_norm_palm_mean_with_climate <- add_clim_data(fr_norm_palm_mean, coordinates_grid)\n\nfr_palms_with_climate |> \n  ggplot(aes(scale(clim_val), obs_ab)) +\n  geom_point(alpha = 0.05, col = 'firebrick2', size = 0.3) + \n  facet_wrap(~clim_var+SBM_G, ncol = 7, nrow = 4, scales='free') +\n  theme_minimal() +\n  labs(title = 'Mammal Functional Richness ~ Climate', \n       y = 'Proportional abundance', x = 'Climate variable') + \n  geom_smooth(method = 'lm', col = 'firebrick2') +\n  theme(\n    strip.text = element_text(size = 8, face = \"plain\"),\n    strip.background = element_blank()\n  ) +\n  theme(strip.text = element_text(margin = margin(0, 0, 0, 0))) + \n  geom_smooth(aes(scale(clim_val),obs_ab), \n              method = 'lm',\n              col = 'gray',\n              data = fr_norm_palm_mean_with_climate) \n```\n:::\n\n\nPlot mammals relationship with climate\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfr_mammals_with_climate <- add_clim_data(fr_norm_mammals, coordinates_grid)\n\nfr_norm_mammals_mean_with_climate <- add_clim_data(fr_norm_mammals_mean, coordinates_grid)\n\nfr_mammals_with_climate |> \n  ggplot(aes(scale(clim_val), obs_ab)) +\n  geom_point(alpha = 0.05, col = 'darkgreen', size = 0.3) + \n  facet_wrap(~clim_var+SBM_G, ncol = 7, nrow = 4, scales='free') +\n  theme_minimal() +\n  labs(title = 'Palm Functional Richness ~ Climate', \n       y = 'Proportional abundance', x = 'Climate variable') + \n  geom_smooth(method = 'lm', col = 'darkgreen') +\n  theme(\n    strip.text = element_text(size = 8, face = \"plain\"),\n    strip.background = element_blank()\n  ) +\n  theme(strip.text = element_text(margin = margin(0, 0, 0, 0))) + \n  geom_smooth(aes(scale(clim_val),obs_ab), \n              method = 'lm',\n              col = 'gray',\n              data = fr_norm_mammals_mean_with_climate)\n```\n:::\n\n\n# Get the influence of climate on asymmetry\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfull_fta_val_wt_clim <- add_clim_data2(full_fta_val, coordinates_grid)\n\n\n## remove infinite and na values from zscore\n\nfull_fta_val_wt_clim <- \n  full_fta_val_wt_clim |>\n  filter(!is.infinite(zscore), !is.na(zscore))\n\n\nlm_asym_all <- lm(zscore~scale(Temp)*lab + scale(Prec)*lab + scale(TS)*lab + scale(PS)*lab, data = full_fta_val_wt_clim) \n\nsummary(lm_asym_all)\nsjPlot::tab_model(lm_asym_all)\n\nsaveRDS(lm_asym_all, '00_Data/04_models/lm_asym_all.RDS')\n\ngtsummary::tbl_regression(lm_asym_all)\n```\n:::\n\n\nCompute aggregates of FTA and its relationship with climate\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhead(full_fta_val_wt_clim)\n\nagg_fta_clim <- \nfull_fta_val_wt_clim |> \n  group_by(grid) |>\n  summarize(zscore = mean(zscore, na.rm = T), \n            Temp = mean(Temp, na.rm = T), \n            Prec = mean(Prec, na.rm = T), \n            TS = mean(TS, na.rm = T), \n            PS = mean(PS, na.rm = T))\n\nagg_mod <- \nlm(zscore~scale(Temp) + scale(Prec) + scale(TS) + scale(PS), data = agg_fta_clim) \n\nagg_mod |> summary()\n\nsjPlot::tab_model(agg_mod)\n\n\n\nfull_fta_val_wt_clim|>\n  filter(lab == 'p6m5') |>\n  ggplot(aes(scale(PS), fta)) +\n  geom_point(alpha = 0.2, fill = 'gray2', size = 1) +\n  geom_smooth(method = 'lm', col = 'gray2', size = 2) + \n  theme_minimal() + \n  labs(title =  'palms[6] x mammals[5]',\n       x = 'Precipitation Seasonality',\n       y = 'FTA') \n\n\n\nfull_fta_val_wt_clim|>\n  filter(lab == 'p1m3') |>\n  ggplot(aes(scale(PS), fta)) +\n  geom_point(alpha = 0.2, fill = 'gray2', size = 1) +\n  geom_smooth(method = 'lm', col = 'gray2', size = 2) + \n  theme_minimal()  + \n  labs(title = 'palms[1] x mammals[3]',\n       x = 'Precipitation Seasonality',\n       y = 'FTA') \n```\n:::\n\n\n# Define a function to make the plots as function of the climate variable term, make the plot smart to know when lines are significant.\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmake_climate_data_plot <- function(model, var_term){\n\n  # model <- lm_asym_all\n  # var_term <- 'PS'\n  predDat <- sjPlot::plot_model(model, type = 'pred', terms = c(var_term, 'lab'),\n                                return.data = TRUE )\n  \n  ## Add a switch to prepare the labels based on the model terms \n  \n  plot_labels <- c('Temp' = 'Mean Annual Temperature',\n                   'Prec' = 'Total Annual Precipitation',\n                   'TS' = 'Temperature Seasonality',\n                   'PS' = 'Precipitation Seasonality')\n  \n  # Assuming 'predicted_data' contains the predicted values\n  # Extract necessary data from the plot_model object\n  predicted_data_df <- predDat$data\n  predicted_data_df <- as.data.frame(predicted_data_df)\n  \n  ## subset only those significant varialbes\n  \n  model_p <- broom::tidy(model)\n  \n  p_signif <- model_p$term[model_p$p.value < 0.05] |>\n    data.frame() |>\n    setNames('term') |>\n    filter(str_detect(term, var_term)) |> \n    filter(str_detect(term, \"p[0-9]m[0-9]\")) %>% \n    mutate(term = str_extract(term,'p[0-9]m[0-9]')) |>\n    pull('term')\n  \n  # Add significance column\n  predicted_data_df <- predicted_data_df |>\n    mutate(group = str_extract(group_col, 'p[0-9]')) |>\n    mutate(group2 = str_extract(group_col, 'm[0-9]')) |>\n    mutate(signif = ifelse(group_col %in% p_signif, \"p < 0.05\", \"p > 0.05\"))\n  \n  # Check if there are both \"Significant\" and \"Not Significant\"\n  signif_levels <- unique(predicted_data_df$signif)\n  \n  if (all(length(signif_levels) == 1 &  signif_levels == 'p > 0.05')) {\n    # Only one type of significance, plot without linetype differentiation\n    ggplot(predicted_data_df, aes(x = scale(x), y = predicted, color = group2)) +\n      geom_line(size = 1, linetype = 2) +\n      labs(\n        title = 'Predicted z-score of FTA',\n        x = plot_labels[var_term],\n        y = 'FTA z-score',\n        color = 'Interaction Terms'\n      ) +\n      theme_minimal() +\n      theme(\n        legend.position = \"right\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 8)\n      ) +\n      facet_wrap(~ group, ncol = 7) # Adjust ncol to suit the number of interaction terms\n  } else {\n    # Both types of significance, plot with linetype differentiation\n    ggplot(predicted_data_df, aes(x = scale(x), y = predicted, color = group2)) +\n      geom_line(aes(linetype = signif), size = 1) +\n      labs(\n        title = 'Predicted z-score of FTA',\n        x = plot_labels[var_term],\n        y = 'FTA z-score',\n        color = 'Interaction Terms',\n        linetype = 'p-values'\n      ) +\n      theme_minimal() +\n      theme(\n        legend.position = \"right\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 8)\n      ) +\n      facet_wrap(~ group, ncol = 7) # Adjust ncol to suit the number of interaction terms\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nT_fta_plot <- make_climate_data_plot(lm_asym_all, 'Temp')\nPrec_fta_plot <- make_climate_data_plot(lm_asym_all, 'Prec')\nPS_fta_plot <- make_climate_data_plot(lm_asym_all, 'PS')\nTS_fta_plot <- make_climate_data_plot(lm_asym_all, 'TS')\n\n\n## make a 2x2 panel plot \n\ngridExtra::grid.arrange(T_fta_plot, Prec_fta_plot, PS_fta_plot, TS_fta_plot, ncol = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Create the plot\nlibrary(viridis)  # For a nice color scale\n\nprecip_df <- as.data.frame(scale(PrecSe), xy = TRUE)\n\nps_map <-\nggplot() +\n  geom_raster(data = precip_df, aes(x = x, y = y, fill = bio15)) +\n  scale_fill_viridis(name = \"Precipitation\\nSeasonality\", option = \"D\", na.value = \"transparent\") +\n  geom_sf(data = neotropics, fill = NA, color = \"black\", size = 0.5) +\n  coord_sf(xlim = c(-120, -30), ylim = c(-56, 33), expand = FALSE) +\n  labs(\n    x = \"Longitude\",\n    y = \"Latitude\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.title = element_text(size = 12),\n    legend.position = \"right\",\n    legend.title = element_text(size = 12),\n    legend.text = element_text(size = 10)\n  )\n\ngridExtra::grid.arrange(PS_fta_plot, ps_map, ncol = 2)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}